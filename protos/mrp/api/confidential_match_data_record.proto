// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package google.confidential_match.mrp.api;

option java_package = "com.google.cm.mrp.api";
option java_outer_classname = "ConfidentialMatchDataRecordProto";

// Represents a single row of input data.
message ConfidentialMatchDataRecord {
  // Match keys must be specified in MatchConfig for matching.
  repeated MatchKey match_keys = 1;
  // Record level encryption key
  EncryptionKey encryption_key = 2;
  // Metadata is passed through the system unchanged.
  repeated KeyValue metadata = 3;
}

// Represents a single row of output data after processing.
message ConfidentialMatchOutputDataRecord {
  // MatchConfig specifies the data for matching.
  repeated MatchKey match_keys = 1;
  // The record level encryption key.
  EncryptionKey encryption_key = 2;
  // Metadata is passed through the system unchanged.
  repeated KeyValue metadata = 3;
  // The output row status.
  string status = 4;
}

message MatchKey {
  oneof field_info {
    // Individual elements for matching.
    Field field = 1;
    // Multiple elements grouped together for matching.
    CompositeField composite_field = 2;
  }
  // If specified, the key overrides the record level encryption key.
  EncryptionKey encryption_key = 3;
}

message Field {
  // The key is the column's name in the schema.
  KeyValue key_value = 1;
  // Output-only column: All grouped fields to include in output
  repeated MatchedOutputField matched_output_fields = 2;
}

message CompositeField {
  // The column's alias in the match config.
  string key = 1;
  repeated CompositeChildField child_fields = 2;
  // Output-only column: All grouped fields to include in output
  repeated MatchedOutputField matched_output_fields = 3;
}

message CompositeChildField {
  // The key is the column's name in the schema.
  KeyValue key_value = 1;
}

// Represents one group a fields to output
message MatchedOutputField {
  repeated KeyValue key_value = 1;
}

// Holds data to decrypt encrypted workloads
message EncryptionKey {

  // Hybrid encryption provided by a coordinator
  message CoordinatorKey {
    string key_id = 1;
  }

  // A data encryption key (DEK) wrapped by a GCP KMS key.
  message GcpWrappedKey {
    // Base64-encoded encrypted DEK
    string encrypted_dek = 1;
    // The URI of the GCP KMS key to decrypt the DEK
    string kek_uri = 2;
    // Fully-qualified Workload Identity Pool Provider ID
    optional string wip = 3;
  }

  // A data encryption key wrapped by an AWS KMS key.
  message AwsWrappedKey {
    // Base64-encoded encrypted DEK
    string encrypted_dek = 1;
    // The URI of the AWS KMS key to decrypt the DEK
    string kek_uri = 2;
    // The ARN of the IAM Role to assume for KMS decryption access
    optional string role_arn = 3;
  }

  oneof key {
    CoordinatorKey coordinator_key = 1;
    GcpWrappedKey wrapped_key = 2;
    AwsWrappedKey aws_wrapped_key = 3;
  }
}

// Represents a key-value pair for the public facing API.
message KeyValue {
  // The key associated with the key-value pair.
  string key = 1;
  // The value associated with the key-value pair.
  oneof value {
    string string_value = 2;
    int64 int_value = 3;
    double double_value = 4;
    bool bool_value = 5;
  }
}
