// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package google.confidential_match.mrp.backend;

option java_package = "com.google.cm.mrp.backend";
option java_outer_classname = "JobResultCodeProto";

/** Return code within ResultInfo for Match Request Processor (MRP). */
enum JobResultCode {
  reserved 15, 104, 105, 108, 113, 119;
  reserved "MRP_RETRIABLE_INTERNAL_ERROR", "MRP_INTERNAL_ERROR";
  JOB_RESULT_CODE_UNKNOWN = 0;

  // Successful
  SUCCESS = 1;

  // Retryable (System) errors; 1 < resultCode < 100
  INPUT_FILE_LIST_READ_ERROR = 2; // unable to list blobs in the input bucket
  INPUT_FILE_READ_ERROR = 3; // unable to read a blob from input stream
  INPUT_FILE_CLOSING_ERROR = 4; // unable to close the blob input stream
  SCHEMA_FILE_CLOSING_ERROR = 5; // unable to close the blob input stream for the schema file
  OUTPUT_FILE_WRITE_ERROR = 6; // unable to write to the local output file
  OUTPUT_FILE_CLOSING_ERROR = 7; // unable to close the local output file
  OUTPUT_FILE_UPLOAD_ERROR = 8; // unable to upload the local output file to GCS
  LOOKUP_SERVICE_FAILURE = 9; // lookup service error (after multiple retries)
  ORCHESTRATOR_SERVICE_ERROR = 10; // orchestrator service error (after multiple retries)
  OUTPUT_FILE_LIST_ERROR = 11; // unable to list blobs in the output bucket
  OUTPUT_FILE_DELETE_ERROR = 12; // unable to delete blobs in the output bucket
  SCHEMA_FILE_READ_ERROR = 13; // unable to read the schema file from input stream
  COORDINATOR_KEY_SERVICE_ERROR = 14; // coordinator key service error (after multiple retries)
  CRYPTO_CLIENT_ERROR = 16; // coordinator key service error (after multiple retries)
  CRYPTO_CLIENT_CONFIGURATION_ERROR = 17; // crypto client is not configured properly
  DATA_READER_CONFIGURATION_ERROR = 32; // crypto client is not configured properly
  ENCRYPTION_COLUMNS_PROCESSING_ERROR = 18; // Encryption columns incorrectly processed
  ENCRYPTION_COLUMNS_CONFIG_ERROR = 26; // Config for encryption columns is invalid
  ENCRYPTION_METADATA_CONFIG_ERROR = 27; // Error during configuration of encryption metadata
  LOOKUP_SERVICE_INVALID_KEY_TYPE = 19; // invalid keytype to send to lookup service
  LOOKUP_SERVICE_INVALID_ERROR = 20; // invalid error received from lookup service
  TINK_REGISTRATION_FAILED = 21; // Failed to register with the tink registry
  INVALID_PARTIAL_ERROR = 22; // Invalid or missing partial error
  PARTIAL_SUCCESS_CONFIG_ERROR = 23; // Partial success configuration error
  DATA_OUTPUT_CONDENSER_ERROR = 24; // DataOutputCondenser failed
  TRANSFORMATION_CONFIG_ERROR = 25; // DataOutputCondenser failed
  WRITER_MISSING_COORDINATOR_KEY = 28; // Coordinator Key absent from DataRecord during write phase
  WRITER_MISSING_DEK = 29; // Dek absent from DataRecord during write phase
  WRITER_MISSING_KEK = 30; // Kek absent from DataRecord during write phase
  WRITER_MISSING_WIP = 31; // Wip absent from DataRecord during write phase

  // Non-retryable (User) errors; 100 <= resultCode < 200
  INVALID_PARAMETERS = 100; // unable to parse job parameters or invalid job parameters
  MISSING_SCHEMA_ERROR = 101; // missing schema file
  INVALID_SCHEMA_FILE_ERROR = 102; // invalid schema file (ex. invalid JSON)
  INVALID_INPUT_FILE_ERROR = 103; // invalid input file (ex. invalid CSV)
  INVALID_ENCRYPTION_COLUMN = 106; // schema or data file contains invalid dek or kek columns
  MISSING_ENCRYPTION_COLUMN = 107; // schema or data file missing dek, kek, wip, or keyID columns
  INVALID_NESTED_SCHEMA_FILE_ERROR = 109; // invalid nested schema for a nested column
  INVALID_DATA_LOCATION_CONFIGURATION = 110; // invalid data location configuration (ex. input blob prefix and paths specified)
  INVALID_COLUMN_ENCODING = 111; // invalid column encoding
  SCHEMA_PERMISSIONS_ERROR = 112; // cannot access schema file
  JOB_DECRYPTION_ERROR = 114; // Non-retriable job-level error code for decryption-related failures
  FAILED_WITH_ROW_ERRORS = 115; // Entire job failed with different row-level error codes
  RETRIES_EXHAUSTED = 116; // Job reached max retry limit
  INVALID_WIP_PARAMETER = 117;  // WIP is formatted incorrectly or WIP does not exist
  WIP_AUTH_FAILED = 118;  // The WIP could not be used because it was rejected by its attestation condition
  UNSUPPORTED_DEK_KEY_TYPE = 120; // DEK Key type in parameter is not supported
  UNSUPPORTED_ENCRYPTION_TYPE = 121; // Encryption key type (Wrapped or Coordinator) not supported by application_id
  INVALID_DATA_FORMAT = 123; // Unsupported data format
  UNAUTHORIZED_AUDIENCE = 124; // Audience rejected by AWS KMS policy
  INVALID_ROLE_FORMAT = 125; // AWS does not exist or no permission
  INVALID_ROLE_PARAMETER = 126; // AWS Role does not exist or no permission
  AWS_AUTH_FAILED = 127; // Attestation was rejected by AWS KMS
  INVALID_KEK = 128; // KEK cannot decrypt data due to not existing or incorrect (not attestation)
  INVALID_KEK_FORMAT = 129; // KEK was not formatted correctly
  UNSUPPORTED_MODE_ERROR = 130; // Mode is not supported by application

  // Partial errors; 200 <= resultCode < 300
  PARTIAL_SUCCESS = 200;
  DECRYPTION_ERROR = 201;
  DEK_DECRYPTION_ERROR = 202;
  DECODING_ERROR = 203;
  NESTED_COLUMN_PARSING_ERROR = 204;
  DEK_MISSING_IN_RECORD = 205;
  KEK_MISSING_IN_RECORD = 206;
  COORDINATOR_KEY_MISSING_IN_RECORD = 207;
  COORDINATOR_KEY_ENCRYPTION_ERROR = 208;
  DEK_KEY_TYPE_MISMATCH = 209;
  WIP_MISSING_IN_RECORD = 210;
  PROTO_METADATA_CONTAINING_RESTRICTED_ALIAS = 211;
  PROTO_MISSING_MATCH_KEYS = 212;
  PROTO_DUPLICATE_METADATA_KEY = 213;
  PROTO_MATCH_KEY_MISSING_FIELD = 214;
  PROTO_MATCH_KEY_HAS_BAD_CHILD_FIELDS = 215;
}
