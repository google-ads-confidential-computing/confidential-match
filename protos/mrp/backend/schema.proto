// Copyright 2025 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package google.confidential_match.mrp.backend;

option java_package = "com.google.cm.mrp.backend";
option java_outer_classname = "SchemaProto";

message Schema {
  enum ColumnType {
    COLUMN_TYPE_UNSPECIFIED = 0;
    STRING = 1;
    INT = 2;
    DOUBLE = 3;
    BOOL = 4;
  }

  enum ColumnFormat {
    COLUMN_FORMAT_UNSPECIFIED = 0;
    GTAG = 1;
  }

  enum ColumnEncoding {
    COLUMN_ENCODING_UNSPECIFIED = 0;
    BASE64_URL = 1;
  }

  // Selects the way data will be condensed for any CondensedColumn that appears
  // in the output_columns.
  enum CondenseMode {
    CONDENSE_MODE_UNSPECIFIED = 0;
    CONDENSE_COLUMNS_PROTO = 1;
  }

  message Column {
    string column_name = 1;
    optional string column_alias = 2; // must match the column_name in match config
                                      // multiple columns can have the same alias
    optional ColumnType column_type = 3;
    optional int32 column_index = 4; // for CSV files without headers (0 based)
    optional int32 column_group = 5; // column group for multi-valued composite columns (0 based)
    optional bool encrypted = 6; // lets MRP know to decrypt this column
                                 // (only if job has encrypted_metadata)
    optional Schema nested_schema = 7; // for columns formatted as multiple
                                       // (key, value) pairs grouped together
    optional ColumnFormat column_format = 8; // for columns with nested_schema
    optional ColumnEncoding column_encoding = 9; // for columns with a custom encoding
                                                 // supported only for encrypted columns
  }

  message OutputColumn {
    oneof column_type {
      Column column = 1;
      CondensedColumn condensed_column = 2; // Requires CondenseMode be set.
    }
  }

  // The structure of the condensed column when used for output
  message CondensedColumn {
    string column_name = 1;
    CondenseMode condense_mode = 2;
    repeated SubColumn subcolumns = 3;
  }

  message SubColumn {
    oneof column_type {
      Column column = 1; // A single column to be condensed.
      CompositeColumn composite_column = 2; // A column group for condensing.
    }
  }

  // For combining a group of columns into a single output column
  message CompositeColumn {
    string column_name = 1;
    repeated Column columns = 2;
  }

  enum DataFormat {
    DATA_FORMAT_UNSPECIFIED = 0;
    CSV = 1;
    SERIALIZED_PROTO = 2;
  }

  repeated Column columns = 1;
  repeated OutputColumn output_columns = 4;
  DataFormat data_format = 2;
  optional bool skip_header_record = 3;
}
