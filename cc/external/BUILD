# Copyright 2025 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

package(
    default_visibility = ["//visibility:public"],
)

alias(
    name = "absl_base_core_headers",
    actual = "@com_google_absl//absl/base:core_headers",
)

alias(
    name = "absl_check",
    actual = "@com_google_absl//absl/log:check",
)

alias(
    name = "absl_debugging_failure_signal_handler",
    actual = "@com_google_absl//absl/debugging:failure_signal_handler",
)

alias(
    name = "absl_flat_hash_map",
    actual = "@com_google_absl//absl/container:flat_hash_map",
)

alias(
    name = "absl_flat_hash_set",
    actual = "@com_google_absl//absl/container:flat_hash_set",
)

alias(
    name = "absl_hash",
    actual = "@com_google_absl//absl/hash",
)

alias(
    name = "absl_log",
    actual = "@com_google_absl//absl/log:absl_log",
)

alias(
    name = "absl_span",
    actual = "@com_google_absl//absl/types:span",
)

alias(
    name = "absl_status",
    actual = "@com_google_absl//absl/status",
)

alias(
    name = "absl_str_format",
    actual = "@com_google_absl//absl/strings:str_format",
)

alias(
    name = "absl_strings",
    actual = "@com_google_absl//absl/strings",
)

alias(
    name = "absl_synchronization",
    actual = "@com_google_absl//absl/synchronization",
)

alias(
    name = "absl_time",
    actual = "@com_google_absl//absl/time",
)

alias(
    name = "boost_bimap",
    actual = "@boost//:bimap",
)

alias(
    name = "google_gtest",
    actual = "@com_google_googletest//:gtest",
)

alias(
    name = "google_gtest_main",
    actual = "@com_google_googletest//:gtest_main",
)

alias(
    name = "google_protobuf",
    actual = "@com_google_protobuf//:protobuf",
)

alias(
    name = "onetbb",
    actual = "@oneTBB//:tbb",
)

alias(
    name = "re2",
    actual = "@com_googlesource_code_re2//:re2",
)

alias(
    name = "scp_core_common_serialization",
    actual = "@com_google_adm_cloud_scp//cc/core/common/serialization/src:serialization_lib",
)

alias(
    name = "scp_core_common_uuid",
    actual = "@com_google_adm_cloud_scp//cc/core/common/uuid/src:uuid_lib",
)

alias(
    name = "scp_core_async_executor",
    actual = "@com_google_adm_cloud_scp//cc/core/async_executor/src:core_async_executor_lib",
)

alias(
    name = "scp_core_authorization_proxy_lib",
    actual = "@com_google_adm_cloud_scp//cc/core/authorization_proxy/src:core_authorization_proxy_lib",
)

alias(
    name = "scp_core_auto_expiry_concurrent_map_lib",
    actual = "@com_google_adm_cloud_scp//cc/core/common/auto_expiry_concurrent_map/src:auto_expiry_concurrent_map_lib",
)

alias(
    name = "scp_core_concurrent_queue",
    actual = "@com_google_adm_cloud_scp//cc/core/common/concurrent_queue/src:concurrent_queue_lib",
)

alias(
    name = "scp_core_global_logger_lib",
    actual = "@com_google_adm_cloud_scp//cc/core/common/global_logger/src:global_logger_lib",
)

alias(
    name = "scp_core_interface_lib",
    actual = "@com_google_adm_cloud_scp//cc/core/interface:interface_lib",
)

alias(
    name = "scp_core_async_context_lib",
    actual = "@com_google_adm_cloud_scp//cc/core/interface:async_context_lib",
)

alias(
    name = "scp_core_errors_lib",
    actual = "@com_google_adm_cloud_scp//cc/core/interface:errors_lib",
)

alias(
    name = "scp_core_execution_result",
    actual = "@com_google_adm_cloud_scp//cc/public/core/interface:execution_result",
)

alias(
    name = "scp_core_execution_result_matchers",
    actual = "@com_google_adm_cloud_scp//cc/public/core/test/interface:execution_result_matchers",
)

alias(
    name = "scp_core_type_def_lib",
    actual = "@com_google_adm_cloud_scp//cc/core/interface:type_def_lib",
)

alias(
    name = "scp_core_utils_lib",
    actual = "@com_google_adm_cloud_scp//cc/core/utils/src:core_utils",
)

alias(
    name = "scp_core_config_provider",
    actual = "@com_google_adm_cloud_scp//cc/core/config_provider/src:config_provider_lib",
)

alias(
    name = "scp_core_http1_curl_client",
    actual = "@com_google_adm_cloud_scp//cc/core/curl_client/src:http1_curl_client_lib",
)

alias(
    name = "scp_core_http2_client",
    actual = "@com_google_adm_cloud_scp//cc/core/http2_client/src:http2_client_lib",
)

alias(
    name = "scp_core_http2_client_mock",
    actual = "@com_google_adm_cloud_scp//cc/core/http2_client/mock:http2_client_mock",
)

alias(
    name = "scp_core_http2_server",
    actual = "@com_google_adm_cloud_scp//cc/core/http2_server/src:core_http2_server_lib",
)

alias(
    name = "scp_core_logger",
    actual = "@com_google_adm_cloud_scp//cc/core/logger/src:logger_lib",
)

alias(
    name = "scp_core_log_providers",
    actual = "@com_google_adm_cloud_scp//cc/core/logger/src/log_providers:log_providers_lib",
)

alias(
    name = "scp_core_syslog",
    actual = "@com_google_adm_cloud_scp//cc/core/logger/src/log_providers/syslog:syslog_lib",
)

alias(
    name = "scp_core_async_executor_mock",
    actual = "@com_google_adm_cloud_scp//cc/core/async_executor/mock:core_async_executor_mock",
)

alias(
    name = "scp_core_config_provider_mock",
    actual = "@com_google_adm_cloud_scp//cc/core/config_provider/mock:core_config_provider_mock",
)

alias(
    name = "scp_core_http2_server_mock",
    actual = "@com_google_adm_cloud_scp//cc/core/http2_server/mock:core_http2_server_mock",
)

alias(
    name = "scp_core_test_utils_lib",
    actual = "@com_google_adm_cloud_scp//cc/core/test/utils:utils_lib",
)

alias(
    name = "scp_cpio_cloud_initializer",
    actual = "@com_google_adm_cloud_scp//cc/public/cpio/interface/cloud_initializer",
)

alias(
    name = "scp_cpio_blob_storage_client_interface",
    actual = "@com_google_adm_cloud_scp//cc/public/cpio/interface/blob_storage_client:blob_storage_client",
)

alias(
    name = "scp_cpio_blob_storage_client_mock",
    actual = "@com_google_adm_cloud_scp//cc/public/cpio/mock/blob_storage_client:blob_storage_client_mock",
)

alias(
    name = "scp_cpio_blob_storage_proto",
    actual = "@com_google_adm_cloud_scp//cc/public/cpio/proto/blob_storage_service/v1:blob_storage_service_cc_proto",
)

alias(
    name = "scp_cpio_crypto_client_interface",
    actual = "@com_google_adm_cloud_scp//cc/public/cpio/interface/crypto_client:crypto_client",
)

alias(
    name = "scp_cpio_crypto_client_mock",
    actual = "@com_google_adm_cloud_scp//cc/public/cpio/mock/crypto_client:crypto_client_mock",
)

alias(
    name = "scp_cpio_crypto_client_proto",
    actual = "@com_google_adm_cloud_scp//cc/public/cpio/proto/crypto_service/v1:crypto_service_cc_proto",
)

alias(
    name = "scp_cpio_kms_client_interface",
    actual = "@com_google_adm_cloud_scp//cc/public/cpio/interface/kms_client:kms_client",
)

alias(
    name = "scp_cpio_kms_client_mock",
    actual = "@com_google_adm_cloud_scp//cc/public/cpio/mock/kms_client:kms_client_mock",
)

alias(
    name = "scp_cpio_kms_proto",
    actual = "@com_google_adm_cloud_scp//cc/public/cpio/proto/kms_service/v1:kms_service_cc_proto",
)

alias(
    name = "scp_cpio_aws_kms_client",
    actual = "@com_google_adm_cloud_scp//cc/public/cpio/interface/kms_client/aws:aws_kms_client",
)

alias(
    name = "scp_cpio_parameter_client_interface",
    actual = "@com_google_adm_cloud_scp//cc/public/cpio/interface/parameter_client:parameter_client",
)

alias(
    name = "scp_cpio_parameter_client_mock",
    actual = "@com_google_adm_cloud_scp//cc/public/cpio/mock/parameter_client:parameter_client_mock",
)

alias(
    name = "scp_cpio_parameter_proto",
    actual = "@com_google_adm_cloud_scp//cc/public/cpio/proto/parameter_service/v1:parameter_service_cc_proto",
)

alias(
    name = "scp_cpio_metric_client_interface",
    actual = "@com_google_adm_cloud_scp//cc/public/cpio/interface/metric_client:metric_client",
)

alias(
    name = "scp_cpio_metric_client_mock",
    actual = "@com_google_adm_cloud_scp//cc/public/cpio/mock/metric_client:metric_client_mock",
)

alias(
    name = "scp_cpio_metric_proto",
    actual = "@com_google_adm_cloud_scp//cc/public/cpio/proto/metric_service/v1:metric_service_cc_proto",
)

alias(
    name = "scp_cpio_metric_instance",
    actual = "@com_google_adm_cloud_scp//cc/public/cpio/utils/metric_instance/src:metric_instance",
)

alias(
    name = "scp_cpio_metric_instance_interface",
    actual = "@com_google_adm_cloud_scp//cc/public/cpio/utils/metric_instance/interface:metric_instance_interface",
)

alias(
    name = "scp_cpio_metric_instance_mock",
    actual = "@com_google_adm_cloud_scp//cc/public/cpio/utils/metric_instance/mock:metric_instance_mock",
)

alias(
    name = "scp_cpio_private_key_client_interface",
    actual = "@com_google_adm_cloud_scp//cc/public/cpio/interface/private_key_client:private_key_client",
)

alias(
    name = "scp_cpio_private_key_client_mock",
    actual = "@com_google_adm_cloud_scp//cc/public/cpio/mock/private_key_client:private_key_client_mock",
)

alias(
    name = "scp_cpio_private_key_service_proto",
    actual = "@com_google_adm_cloud_scp//cc/public/cpio/proto/private_key_service/v1:private_key_service_cc_proto",
)

alias(
    name = "scp_cpio_interface_lib",
    actual = "@com_google_adm_cloud_scp//cc/public/cpio/interface:cpio",
)

alias(
    name = "scp_cpio_sync_utils",
    actual = "@com_google_adm_cloud_scp//cc/public/cpio/utils/sync_utils/src:sync_utils",
)

alias(
    name = "scp_cpio_test_interface_lib",
    actual = "@com_google_adm_cloud_scp//cc/public/cpio/test/global_cpio:test_lib_cpio",
)

alias(
    name = "scp_core_test_utils",
    actual = "@com_google_adm_cloud_scp//cc/core/test/utils:utils_lib",
)

alias(
    name = "tink_cc",
    actual = "@tink_cc//:tink_cc",
)

alias(
    name = "tink_cc_cleartext_keyset_handle",
    actual = "@tink_cc//:cleartext_keyset_handle",
)

alias(
    name = "tink_cc_mock_aead",
    actual = "@tink_cc//aead:mock_aead",
)

alias(
    name = "tink_cc_proto",
    actual = "@tink_cc//proto:tink_cc_proto",
)

alias(
    name = "tink_jwt_jwk_set_converter",
    actual = "@tink_cc//jwt:jwk_set_converter",
)

alias(
    name = "tink_jwt_public_key_verify",
    actual = "@tink_cc//jwt:jwt_public_key_verify",
)

alias(
    name = "tink_jwt_signature_config",
    actual = "@tink_cc//jwt:jwt_signature_config",
)

alias(
    name = "tink_jwt_validator",
    actual = "@tink_cc//jwt:jwt_validator",
)

alias(
    name = "tink_jwt_verified_jwt",
    actual = "@tink_cc//jwt:verified_jwt",
)
